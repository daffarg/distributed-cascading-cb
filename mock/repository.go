// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddMembersIntoSet mocks base method.
func (m *MockRepository) AddMembersIntoSet(ctx context.Context, key string, members ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMembersIntoSet", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMembersIntoSet indicates an expected call of AddMembersIntoSet.
func (mr *MockRepositoryMockRecorder) AddMembersIntoSet(ctx, key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMembersIntoSet", reflect.TypeOf((*MockRepository)(nil).AddMembersIntoSet), varargs...)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, key)
}

// GetMemberOfSet mocks base method.
func (m *MockRepository) GetMemberOfSet(ctx context.Context, key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberOfSet", ctx, key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberOfSet indicates an expected call of GetMemberOfSet.
func (mr *MockRepositoryMockRecorder) GetMemberOfSet(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberOfSet", reflect.TypeOf((*MockRepository)(nil).GetMemberOfSet), ctx, key)
}

// IsKeyExist mocks base method.
func (m *MockRepository) IsKeyExist(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeyExist", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsKeyExist indicates an expected call of IsKeyExist.
func (mr *MockRepositoryMockRecorder) IsKeyExist(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeyExist", reflect.TypeOf((*MockRepository)(nil).IsKeyExist), ctx, key)
}

// IsMemberOfSet mocks base method.
func (m *MockRepository) IsMemberOfSet(ctx context.Context, key, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberOfSet", ctx, key, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberOfSet indicates an expected call of IsMemberOfSet.
func (mr *MockRepositoryMockRecorder) IsMemberOfSet(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberOfSet", reflect.TypeOf((*MockRepository)(nil).IsMemberOfSet), ctx, key, value)
}

// IsMembersOfSet mocks base method.
func (m *MockRepository) IsMembersOfSet(ctx context.Context, key string, value ...string) ([]bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range value {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsMembersOfSet", varargs...)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMembersOfSet indicates an expected call of IsMembersOfSet.
func (mr *MockRepositoryMockRecorder) IsMembersOfSet(ctx, key interface{}, value ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, value...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMembersOfSet", reflect.TypeOf((*MockRepository)(nil).IsMembersOfSet), varargs...)
}

// Scan mocks base method.
func (m *MockRepository) Scan(ctx context.Context, pattern string, count int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, pattern, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockRepositoryMockRecorder) Scan(ctx, pattern, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRepository)(nil).Scan), ctx, pattern, count)
}

// Set mocks base method.
func (m *MockRepository) Set(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRepositoryMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRepository)(nil).Set), ctx, key, value)
}

// SetWithExp mocks base method.
func (m *MockRepository) SetWithExp(ctx context.Context, key, value string, exp time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithExp", ctx, key, value, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithExp indicates an expected call of SetWithExp.
func (mr *MockRepositoryMockRecorder) SetWithExp(ctx, key, value, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExp", reflect.TypeOf((*MockRepository)(nil).SetWithExp), ctx, key, value, exp)
}
